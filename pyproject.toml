[project]
name = "ska-mid-dish-manager"
version = "8.4.0"
description = "SKA Dish Manager TANGO device server"
authors = [{name = "Team Karoo"}]
maintainers = [{name = "Team Karoo"}]
license = "BSD-3-Clause"
readme = 'README.md'
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
]
packages = [
    { include = "ska_mid_dish_manager", from = "src" }
]
include = [
    { path = 'tests'},
]
requires-python = ">=3.10,<4.0"
package-mode = false
dependencies = [
    "pytango==9.5.0",
    "numpy<2.0.0",
    "ska-control-model>=1.0.0",
    "ska-ser-logging>=0.4.1",
    "ska-tango-base==1.0.0",
    "networkx==2.6.3",
    "rule-engine==3.5.0",
    "astropy>=6.0.1",
    "typing-extensions>=4.3.0"
]

[project.urls]
Documentation = "https://developer.skao.int/projects/ska-mid-dish-manager/en/latest/?badge=latest"
Repository = "https://gitlab.com/ska-telescope/ska-mid-dish-manager"

[project.scripts]
DishManagerDS = 'ska_mid_dish_manager.devices.DishManagerDS:main'

[[tool.poetry.source]]
name = "ska-nexus"
url = "https://artefact.skao.int/repository/pypi-internal/simple"
priority = "primary"

[[tool.poetry.source]]
name = "pypi-public"
url = "https://pypi.org/simple/"

[tool.poetry.group.dev.dependencies]
black = "^22.3.0"
isort = "^5.6.4"
flake8 = "^3.8.4"
pylint = "^2.17.2"
coverage = "^6.1.1"
pytest = "^7.1"
unittest2 = "^1.1.0"
pytest-cov = "^2.10.1"
pytest-repeat = "^0.9.1"
pylint-junit = "^0.3.2"
pytest-json-report = "^1.4.1"
pytest-forked = "^1.4.0"
pytest-mock = "^3.9.0"
pytest-timeout = "^2.1.0"
mock = "^4.0.3"
tango-simlib = "^0.9.4"
requests = "^2.28.1"
mypy = "^0.982"
ska-tango-testing = "0.2.0"
ruff = "^0.12.0"
matplotlib = "^3.10.3"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
docutils = "< 0.20"
Sphinx = "^5.3.0"
ska-ser-sphinx-theme = "^0.1.2"
sphinx-copybutton = "*"
sphinx-tabs = "*"
sphinx-autodoc-typehints = "*"
sphinxcontrib-plantuml = "*"
typing_extensions = "*"

[tool.pytest.ini_options]
testpaths = "tests"
addopts = "--forked --json-report --json-report-file=build/reports/report.json --cov-report html:build/htmlcov --cov-report xml:build/reports/code-coverage.xml --cov-report term:skip-covered --cov=ska_mid_dish_manager --junitxml=build/reports/unit-tests.xml --verbose"
console_output_style = "progress"
junit_family = "legacy"
markers = [
    "unit",
    "acceptance",
    "stress",
    "track_patterns",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".eggs",
    ".git",
    ".git-rewrite",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "build",
    "dist",
    "docs",
    "notebooks",
    "resources",
    "scripts",
]
 
# Same as Black.
line-length = 99
indent-width = 4
 
[tool.ruff.lint]
select = [
    "A", # flake8-builtins
    "D", # pydocstyle
    "E", # pycodestyle-error
    "W", # pycodestyle-warning
    "F", # pyflakes
    "I", # isort
    "N", # pep8-naming
    "PL" # pylint
]
ignore = [
    "D205", # 1 blank line required between summary line and description
    "D419", # Docstring is empty
    "D401", # Imperitive mood first line
    "PLR2004", # Magic constant
    "D104", # Missing docstring in public package
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D107", # Missing docstring in `__init__`
    "D103", # Missing docstring in public function
    "D105", # Missing docstring in magic method
    "D100", # Missing docstring in public module
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments in function definition
    "PLR0915", # Too many statements
    "N802", # Function name should be lower case
    "D404", # First word should not be "This"
    "N806", # Variable in function should be lowercase
    "N811", # Constant imported as non-constant
    "N999", # Invalid module name
    "PLR0911", # Too many return statements
]
 
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
 
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
 
[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
 
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
 
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
 
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
 
# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true
 
# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = 70


[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
line_length = 99

[tool.coverage.paths]
source = ["src"]

[tool.coverage.run]
data_file = ".coverage/.coverage"
branch = true
source = ["ska_mid_dish_manager"]

[tool.coverage.report]
show_missing = false

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

