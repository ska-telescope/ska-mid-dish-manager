enabled: true

ska-mid-dish-simulators:
  enabled: false

ska-mid-dish-ds-manager:
  enabled: false

system: SW-infrastructure
subsystem: ska-dish-lmc
telescope: SKA-mid

labels:
  app: ska-mid-dish-manager

ska-tango-base:
  enabled: false

global:
  minikube: false
  operator: false
  tango_host: databaseds-tango-base-test:10000
  retry:
  - "--tries=10"

  ## Order of instances resolution ##
  # .Values.global.dishes
  # .Values.deviceServers.<device>.instances
  # File, data/<device>.yaml, instances

  # List the dishes, if set, then this list will be
  # applied to instances of > deviceServers.dishmanager
  # Values follow the sequence in the mnenomic Dish ID
  # defined in ADR-32 i.e. SKA[nnn] where nnn starts
  # from 001 to 133
  dish_devices: ["dish-manager"]
  dishes: ["001"]


dsconfig:
  image:
    registry: artefact.skao.int
    image: ska-tango-images-tango-dsconfig
    tag: 1.5.11
    pullPolicy: IfNotPresent

dishmanager:
  image:
    registry: artefact.skao.int
    image: ska-mid-dish-manager
    tag: 7.4.0
    pullPolicy: IfNotPresent

  # Setting fqdn assumes you are only deploying one Dish Manager
  # with custom sub devices addresses
  # Otherwise device names will follow "mid-dish/<family_name>/ska0<N>" for N dishes
  spf:
    ignored: False
    fqdn: ""
    domain_name: "mid-dish"
    family_name: "simulator-spfc"

  ds:
    fqdn: ""
    domain_name: "mid-dish"
    family_name: "ds-manager"

  spfrx:
    ignored: False
    fqdn: ""
    domain_name: "mid-dish"
    family_name: "simulator-spfrx"

dev_pod:
  enabled: false

resources:
  limits:
    cpu: 300m
    memory: 500Mi
  requests:
    cpu: 100m
    memory: 375Mi

deviceServers:
  dishmanager:
    file: "data/dish_manager.yaml"
    enabled: true

ska-mid-wms:
  enabled: false
  ska-tango-base:
    enabled: false
  deviceServers:
    # Default TRL: mid/wms/<instance number> eg: mid/wms/0
    # Uncomment the below to set a custom TRL, host or port
    wms0:
      enabled: false
      # server:
      #   name: "WMSDevice"
      #   instances:
      #   - name: "wms0"
      #     classes:
      #     - name: WMSDevice
      #       devices:
      #         - dev01:
      #           name: "custom/wmsTrl/0"
      #           properties:
      #           - name: "Host"
      #             values:
      #             - "wms-sim-0"
      #           - name: "Port"
      #             values:
      #             - "1502" 
    wms1:
      enabled: false
    wms2:
      enabled: false
    wms3:
      enabled: false
    wms4:
      enabled: false
  # Specify set of simulated WMS servers to connect to
  # each WMSDevice instance where hardware is unavailable 
  # eg: if "wm0" and "wm1" enabled, then simulator config is
  # weatherStations: ["0", "1"].
  simulator:
    weatherStations: []
