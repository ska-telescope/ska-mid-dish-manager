{{ $cluster_domain := coalesce .Values.global.cluster_domain "cluster.local" }}
{{ $databaseds_name := (split ":" .Values.global.tango_host)._0 }} 
{{ $databaseds_port := (split ":" .Values.global.tango_host)._1 }}
{{ $tries := coalesce  .Values.global.tries 10}}
{{ $sleep := coalesce  .Values.global.sleep 5}}

{{ if .Values.global.operator }}

---
apiVersion: tango.tango-controls.org/v1
kind: DatabaseDS
metadata:
  name: {{ tpl ($databaseds_name | toString) . }}
  namespace: {{ .Release.Namespace }}
  labels:
    component: {{ .Values.databaseds.component }}
    function: {{ .Values.databaseds.function }}
    domain: {{ .Values.databaseds.domain }}
    intent: {{ .Values.databaseds.intent }}
{{ toYaml (coalesce .Values.global.labels .Values.labels "label:none") | indent 4 }}
{{- if .Values.databaseds.vault.useVault }}
  annotations: 
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/agent-inject-status: "update"
    vault.hashicorp.com/agent-inject-secret-config: "{{ .Values.databaseds.vault.secretPath }}/ska-tango-base/databaseds"
    vault.hashicorp.com/agent-inject-template-config: |
      {{`{{- with secret `}}"{{ .Values.databaseds.vault.secretPath }}/ska-tango-base/databaseds"{{` -}}`}}
      {{`{{- range $k, $v := .Data.data }}`}}
      {{`export {{ $k }}={{ $v }}`}}
      {{`{{- end }}`}}
      {{`{{- end }}`}}
    vault.hashicorp.com/role: "{{ .Values.databaseds.vault.role }}"
{{- if or (.Values.global.annotations) (.Values.annotations) }}
{{ toYaml (coalesce .Values.global.annotations .Values.annotations) | indent 4 }}
{{- end }}
{{- end }}
spec:
  clusterDomain: {{ $cluster_domain }}
  usePV: {{ .Values.tangodb.use_pv }}
{{- if or (.Values.global.minikube) (.Values.global.exposeAllDS) }}
  enableLoadBalancer: true
{{- end }}
  imagePullPolicy: IfNotPresent
{{- if (coalesce .Values.global.minikube .Values.minikube false)  }}
  tangoDBStorageClass: standard
{{- else }}
  tangoDBStorageClass: nfss1
{{- end }}

{{- else }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ tpl ($databaseds_name | toString) . }}
  namespace: {{ .Release.Namespace }}
  labels:
    component: {{ .Values.databaseds.component }}
    function: {{ .Values.databaseds.function }}
    domain: {{ .Values.databaseds.domain }}
    intent: {{ .Values.databaseds.intent }}
{{ toYaml (coalesce .Values.global.labels .Values.labels "label:none") | indent 4 }}
{{ if or (.Values.global.annotations) (.Values.annotations) }}
  annotations:
{{ toYaml (coalesce .Values.global.annotations .Values.annotations) | indent 4 }}
{{ end }}
spec:
  ports:
  - name: ds
    port: {{ $databaseds_port }}
{{- if or (.Values.global.minikube) (.Values.global.exposeAllDS) }}
  type: LoadBalancer
{{- else }}
  type: NodePort
{{- end }}
  selector:
    component: {{ .Values.databaseds.component }}
    function: {{ .Values.databaseds.function }}
    domain: {{ .Values.databaseds.domain }}
    intent: {{ .Values.databaseds.intent }}
{{ toYaml (coalesce .Values.global.labels .Values.labels "label:none") | indent 4 }}

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ tpl ($databaseds_name | toString) . }}
  namespace: {{ .Release.Namespace }}
  labels:
    component: {{ .Values.databaseds.component }}
    function: {{ .Values.databaseds.function }}
    domain: {{ .Values.databaseds.domain }}
    intent: {{ .Values.databaseds.intent }}
{{ toYaml (coalesce .Values.global.labels .Values.labels "label:none") | indent 4 }}
{{ if or (.Values.global.annotations) (.Values.annotations) }}
  annotations:
{{ toYaml (coalesce .Values.global.annotations .Values.annotations) | indent 4 }}
{{ end }}
spec:
  selector:
    matchLabels:
      component: {{ .Values.databaseds.component }}
      function: {{ .Values.databaseds.function }}
      domain: {{ .Values.databaseds.domain }}
      intent: {{ .Values.databaseds.intent }}
{{ toYaml (coalesce .Values.global.labels .Values.labels "label:none") | indent 6 }}
  serviceName: {{ tpl ($databaseds_name | toString) . }}
  replicas: 1
  template:
    metadata:
      labels:
        component: {{ .Values.databaseds.component }}
        function: {{ .Values.databaseds.function }}
        domain: {{ .Values.databaseds.domain }}
        intent: {{ .Values.databaseds.intent }}
{{ toYaml (coalesce .Values.global.labels .Values.labels "label:none") | indent 8 }}
{{ if .Values.databaseds.vault.useVault }}
      annotations: 
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-inject-status: "update"
        vault.hashicorp.com/agent-inject-secret-config: "{{ .Values.databaseds.vault.secretPath }}/ska-tango-base/databaseds"
        vault.hashicorp.com/agent-inject-template-config: |
          {{`{{- with secret `}}"{{ .Values.databaseds.vault.secretPath }}/ska-tango-base/databaseds"{{` -}}`}}
          {{`{{- range $k, $v := .Data.data }}`}}
          {{`export {{ $k }}={{ $v }}`}}
          {{`{{- end }}`}}
          {{`{{- end }}`}}
        vault.hashicorp.com/role: "{{ .Values.databaseds.vault.role }}"
{{ toYaml (coalesce .Values.global.annotations .Values.annotations) | indent 8 }}
{{ end }}
    spec:
      containers:
      - name: databaseds
        image: "{{ .Values.databaseds.image.registry }}/{{ .Values.databaseds.image.image }}:{{ .Values.databaseds.image.tag }}"
        imagePullPolicy: {{ .Values.databaseds.image.pullPolicy }}
        command:
          - retry 
          - --tries={{$tries}}
          - --sleep={{$sleep}}
          - --
{{ if ((.Values.databaseds.vault).useVault) }}               
          - . /vault/secrets/config || true && /usr/local/bin/wait-for-it.sh #  ST-1064: allow the file to not exist if running on minikube
{{ else }}
          - /usr/local/bin/wait-for-it.sh #  ST-1064: allow the file to not exist if running on min
{{ end }}
          - {{ template "ska-tango-base.name" . }}-{{ .Values.tangodb.component }}:3306
          - --timeout=60
          - --strict
          - --
          - /usr/local/bin/DataBaseds
          - "2"
          - -ORBendPoint
          - giop:tcp::{{ $databaseds_port }}
          - -ORBendPointPublish
          - giop:tcp:$(TANGO_SERVER_PUBLISH_HOSTNAME):{{ $databaseds_port }}
        env:
          - name: MYSQL_HOST
            value: "{{ template "ska-tango-base.name" . }}-{{ .Values.tangodb.component }}:3306"
          - name: MYSQL_DATABASE
            value: "{{ .Values.tangodb.db.db }}"
          - name: MYSQL_USER
            value: "{{ .Values.tangodb.db.user }}"
          - name: MYSQL_PASSWORD
            value: "{{ .Values.tangodb.db.password }}"  # ST-1064: Check if this overwrites the injected value            
          - name: TANGO_SERVER_PUBLISH_HOSTNAME
            value: {{ tpl ($databaseds_name | toString) . }}.{{ .Release.Namespace }}.svc.{{ $cluster_domain }}            
        ports:
        - name: ds
          containerPort: {{ $databaseds_port }}
        {{- if .Values.databaseds.livenessProbe.enabled }}
        readinessProbe:
          exec:
            command:
            - "sh"
            - "-c"
            - "tango_admin"
            - "--ping-device"
            - "sys/database/2"
          initialDelaySeconds: {{ .Values.databaseds.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.databaseds.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.databaseds.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.databaseds.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.databaseds.readinessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.databaseds.readinessProbe.enabled }}
        livenessProbe:
          exec:
            command:
            - "sh"
            - "-c"
            - "tango_admin"
            - "--ping-device"
            - "sys/database/2"
          initialDelaySeconds: {{ .Values.databaseds.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.databaseds.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.databaseds.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.databaseds.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.databaseds.livenessProbe.failureThreshold }}
        {{- end }}
        resources:
{{ toYaml .Values.databaseds.resources | indent 10 }}
{{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}

{{- end }}