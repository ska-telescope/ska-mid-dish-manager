{{- if .Values.tangodb.enabled }}
{{- if not .Values.global.operator }}
---

apiVersion: v1
kind: Service
metadata:
  name: {{ template "ska-tango-base.name" . }}-{{ .Values.tangodb.component }}
  namespace: {{ .Release.Namespace }}
  labels:
    component: {{ .Values.tangodb.component }}
    function: {{ .Values.tangodb.function }}
    domain: {{ .Values.tangodb.domain }}
    intent: {{ .Values.tangodb.intent }}
{{ toYaml (coalesce .Values.global.labels .Values.labels "label:none") | indent 4 }}
{{ if or (.Values.global.annotations) (.Values.annotations) }}
  annotations:
{{ toYaml (coalesce .Values.global.annotations .Values.annotations) | indent 4 }}
{{ end }}
spec:
  ports:
  - name: mysql
    port: 3306
  type: NodePort
  selector:
    component: {{ .Values.tangodb.component }}
    function: {{ .Values.tangodb.function }}
    domain: {{ .Values.tangodb.domain }}
    intent: {{ .Values.tangodb.intent }}
{{ toYaml (coalesce .Values.global.labels .Values.labels "label:none") | indent 4 }}

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "ska-tango-base.name" . }}-{{ .Values.tangodb.component }}
  namespace: {{ .Release.Namespace }}
  labels:
    component: {{ .Values.tangodb.component }}
    function: {{ .Values.tangodb.function }}
    domain: {{ .Values.tangodb.domain }}
    intent: {{ .Values.tangodb.intent }}
{{ toYaml (coalesce .Values.global.labels .Values.labels "label:none") | indent 4 }}
{{ if or (.Values.global.annotations) (.Values.annotations) }}
  annotations:
{{ toYaml (coalesce .Values.global.annotations .Values.annotations) | indent 4 }}
{{ end }}
spec:
  selector:
    matchLabels:
      component: {{ .Values.tangodb.component }}
      function: {{ .Values.tangodb.function }}
      domain: {{ .Values.tangodb.domain }}
      intent: {{ .Values.tangodb.intent }}
{{ toYaml (coalesce .Values.global.labels .Values.labels "label:none") | indent 6 }}
  serviceName: {{ template "ska-tango-base.name" . }}-{{ .Values.tangodb.component }}
  replicas: 1
  template:
    metadata:
      labels:
        component: {{ .Values.tangodb.component }}
        function: {{ .Values.tangodb.function }}
        domain: {{ .Values.tangodb.domain }}
        intent: {{ .Values.tangodb.intent }}
{{ toYaml (coalesce .Values.global.labels .Values.labels "label:none") | indent 8 }}
      annotations:
{{ if ((.Values.tangodb.vault).useVault) }}
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-inject-status: "update"
        vault.hashicorp.com/agent-inject-secret-config: "{{ .Values.tangodb.vault.secretPath }}/ska-tango-base/tangodb"
        vault.hashicorp.com/agent-inject-template-config: |
          {{`{{- with secret `}}"{{ .Values.tangodb.vault.secretPath }}/ska-tango-base/tangodb"{{` -}}`}}
          {{`{{- range $k, $v := .Data.data }}`}}
          {{`export {{ $k }}={{ $v }}`}}
          {{`{{- end }}`}}
          {{`{{- end }}`}}
        vault.hashicorp.com/role: "{{ .Values.tangodb.vault.role }}"
{{ end }}        
{{ if or (.Values.global.annotations) (.Values.annotations) }}
{{ toYaml (coalesce .Values.global.annotations .Values.annotations) | indent 8 }}
{{ end }}
    spec:
      containers:
      - name: tangodb
        image: "{{ .Values.tangodb.image.registry }}/{{ .Values.tangodb.image.image }}:{{ .Values.tangodb.image.tag }}"
        imagePullPolicy: {{ .Values.tangodb.image.pullPolicy }}
{{ if ((.Values.tangodb.vault).useVault) }}
        # Because we need to source the vault secret file, this disrupts the normal container startup.
        # Because of this, after the source command, we need to run the normal container startup scripts / commands.
        # This startup scripts/commands depend on the container application. In this example we are using a MariaDB application.
        # Please read the vault section in the charts/README.md for more information.         
        command: ["sh", "-c", ". /vault/secrets/config || true && docker-entrypoint.sh mariadbd"]
{{ end }}        
        env:
          - name: MYSQL_ROOT_PASSWORD
            value: "{{ .Values.tangodb.db.rootpw }}"
          - name: MYSQL_DATABASE
            value: "{{ .Values.tangodb.db.db }}"
          - name: MYSQL_USER
            value: "{{ .Values.tangodb.db.user }}"
          - name: MYSQL_PASSWORD
            value: "{{ .Values.tangodb.db.password }}"
          - name: MYSQL_ALLOW_EMPTY_PASSWORD
            value: "1"
        ports:
        - name: mysql
          containerPort: 3306
        {{- if .Values.tangodb.livenessProbe.enabled }}
        livenessProbe:
          exec:
{{ if ((.Values.tangodb.vault).useVault) }}      
            command: ["sh", "-c", ". /vault/secrets/config || true && exec mysqladmin status -uroot -p${MYSQL_ROOT_PASSWORD}"]
{{ else }}           
            command: ["exec mysqladmin status -uroot -p${MYSQL_ROOT_PASSWORD}"]
{{ end }}              
          initialDelaySeconds: {{ .Values.tangodb.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.tangodb.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.tangodb.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.tangodb.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.tangodb.livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.tangodb.readinessProbe.enabled }}
        readinessProbe:
          exec:
{{ if ((.Values.tangodb.vault).useVault) }}      
            command: ["sh", "-c", ". /vault/secrets/config || true && exec mysqladmin status -uroot -p${MYSQL_ROOT_PASSWORD}"]
{{ else }}           
            command: ["exec mysqladmin status -uroot -p${MYSQL_ROOT_PASSWORD}"]
{{ end }}  
          initialDelaySeconds: {{ .Values.tangodb.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.tangodb.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.tangodb.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.tangodb.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.tangodb.readinessProbe.failureThreshold }}
        {{- end }}
{{ if .Values.tangodb.use_pv }}
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
{{ end }}
        resources:
{{ toYaml .Values.tangodb.resources | indent 10 }}
      volumes:
{{ if .Values.tangodb.use_pv }}
      - name: data
        persistentVolumeClaim:
          claimName: {{ template "ska-tango-base.name" . }}-tangodb-storage
{{ end }}
{{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}

{{- end }}
{{- end }}