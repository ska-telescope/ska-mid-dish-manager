---
suite: tangodb
templates:
  - tangodb.yaml
tests:
  - it: should have two documents rendered.
    set:
      tangodb.enabled: true
    asserts:
      - hasDocuments:
          count: 2

  - it: should have 2 k8s resources, a Service and a StatefulSet resource, respectively.
    set:
      tangodb.enabled: true
    asserts:
      - isKind:
          of: StatefulSet
        documentIndex: 1
      - isAPIVersion:
          of: apps/v1
        documentIndex: 1
      - isKind:
          of: Service
        documentIndex: 0
      - isAPIVersion:
          of: v1
        documentIndex: 0

  - it: should have a Service of type NodePort, and a container listening on port 3306.
    set:
      tangodb.enabled: true
    asserts:
      - equal:
          path: spec.type
          value: NodePort
        documentIndex: 0
      - equal:
          path: spec.ports[0].name
          value: mysql
        documentIndex: 0
      - equal:
          path: spec.ports[0].port
          value: 3306
        documentIndex: 0
      - equal:
          path: spec.template.spec.containers[0].ports[0].name
          value: mysql
        documentIndex: 1
      - equal:
          path: spec.template.spec.containers[0].ports[0].containerPort
          value: 3306
        documentIndex: 1

  - it: should have a Service that routes traffic to the pods, and a StatefulSet pods, with set labels.
    set:
      labels:
        app: ska-tango-images-test
        dummy-label: dumm
      tangodb:
        enabled: true
        component: tangodb-test
        domain: tango-configuration-test
        function: tango-device-configuration-test
        intent: testing
    asserts:
      - equal:
          path: spec.selector
          value:
            app: ska-tango-images-test
            dummy-label: dumm
            component: tangodb-test
            domain: tango-configuration-test
            function: tango-device-configuration-test
            intent: testing
        documentIndex: 0
      - equal:
          path: spec.selector.matchLabels
          value:
            app: ska-tango-images-test
            dummy-label: dumm
            component: tangodb-test
            domain: tango-configuration-test
            function: tango-device-configuration-test
            intent: testing
        documentIndex: 1

  - it: should set the service name to its own cluster hostname.
    documentIndex: 1
    set:
      tangodb.component: tangodb-test
    asserts:
      - equal:
          path: spec.serviceName
          value: ska-tango-base-tangodb-test

  - it: should have one replica of the Statefulset.
    documentIndex: 1
    asserts:
      - equal:
          path: spec.replicas
          value: 1

  - it: should use the docker image my-own-registry/my-own-image.
    documentIndex: 1
    set:
      tangodb:
        image:
          registry: my-own-registry
          image: my-own-image
          tag: 1.2.3
    asserts:
      - matchRegex:
          path: spec.template.spec.containers[0].image
          pattern: my-own-registry/my-own-image:1.2.3

  - it: should use the pullPolicy set in the values.yaml.
    documentIndex: 1
    set:
      tangodb.image.pullPolicy: AnyPullPolicy
    asserts:
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: AnyPullPolicy

  - it: should set the correct environment variables for the MYSQL database.
    documentIndex: 1
    set:
      tangodb:
        db:
          rootpw: pw-test
          db: tango-test
          user: test-user
          password: password-test
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: MYSQL_ALLOW_EMPTY_PASSWORD
            value: "1"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: MYSQL_DATABASE
            value: tango-test
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: MYSQL_USER
            value: test-user
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: MYSQL_ROOT_PASSWORD
            value: pw-test
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: MYSQL_PASSWORD
            value: password-test
        