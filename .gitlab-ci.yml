# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: $SKA_K8S_TOOLS_BUILD_DEPLOY

variables:
  CHARTS_TO_PUBLISH: ska-mid-dish-manager
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - lint
  - build
  - test
  - publish
  - pages
  - scan

# Standardised included jobs

include:
  # Helm Chart linting and Publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

  # Python packages build,lint, test and publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python.gitlab-ci.yml'

  # OCI images build and publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'

  # k8s test
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/k8s-test-runner.gitlab-ci.yml'

  # Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs.gitlab-ci.yml'

  # Create Gitlab CI badges from CI metrics
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

  # Create a release
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/release.gitlab-ci.yml'

# override k8s-test-runner to print helm flags
k8s-test-runner:
  before_script:
    - cat charts/ska-mid-dish-manager/custom_helm_flags.yaml
    - '[ -f .make/k8s.mk ] || (echo "File k8s.mk not included in Makefile; exit 1")'
    - 'make help | grep k8s-test'
    - make k8s-install-chart
    - make k8s-wait

#mypy job
mypy:
  stage: lint
  script:
    - pip install mypy
    - mypy --ignore-missing-imports --config-file mypy.ini
      src/ska_mid_dish_manager/component_managers/ds_cm.py
      src/ska_mid_dish_manager/component_managers/spf_cm.py
      src/ska_mid_dish_manager/component_managers/spfrx_cm.py
      src/ska_mid_dish_manager/models/dish_mode_model.py
      src/ska_mid_dish_manager/models/dish_state_transition.py
  allow_failure: true


# create a job to run multiple k8s-test-runs
k8s-test-runner-parallel:
  extends: k8s-test-runner
  parallel: 3
  when: manual
  allow_failure: true
  variables:
    KUBE_NAMESPACE: "ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-$CI_NODE_INDEX"

k8s-test-runner-track-patterns:
  extends: k8s-test-runner
  when: manual
  allow_failure: true
  variables:
    K8S_TEST_RUNNER_MARK: "track_patterns"
    KUBE_NAMESPACE: "ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-track-patterns"
