# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

variables:
  CHARTS_TO_PUBLISH: ska-mid-dish-manager
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - lint
  - build
  - test
  - publish
  - pages
  - scan

# Standardised included jobs

include:
  # Helm Chart linting and Publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

  # Python packages build,lint, test and publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python.gitlab-ci.yml'

  # OCI images build and publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'

  # k8s test
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/k8s-test-runner.gitlab-ci.yml'

  # Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs.gitlab-ci.yml'

  # Create Gitlab CI badges from CI metrics
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

  # Create a release
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/release.gitlab-ci.yml'

# pin build images
docs-build:
  image: artefact.skao.int/ska-cicd-k8s-tools-build-deploy:0.7.5

docs-pages:
  image: artefact.skao.int/ska-cicd-k8s-tools-build-deploy:0.7.5

python-build-for-development:
  image: artefact.skao.int/ska-cicd-k8s-tools-build-deploy:0.7.6

python-publish-to-gitlab:
  image: artefact.skao.int/ska-cicd-k8s-tools-build-deploy:0.7.6

# override test images and set permissions
python-test:
  image: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/${CI_PROJECT_NAME}:2.0.0-dev.c$CI_COMMIT_SHORT_SHA
  before_script:
    - echo "Create the build directory and give all users RW permissions"
    - sudo mkdir -p ./build
    - sudo chmod -R a+rw ./build
    - '[ -f .make/python.mk ] || (echo "File python.mk not included in Makefile; exit 1")'
    - 'make help | grep python-test'
    - poetry config virtualenvs.in-project true
    - echo "python-build Setting.. poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE"
    - poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE
    - |
      if [[ -f pyproject.toml ]]; then
        echo "python-test: Installing with poetry";
        time poetry install;
      else
        if  [[ -f requirements.txt ]]; then
          echo "python-test: Installing with pip";
          time pip3 install -r requirements.txt;
        fi;
      fi;

k8s-test-runner:
  image: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/${CI_PROJECT_NAME}:2.0.0-dev.c$CI_COMMIT_SHORT_SHA
  before_script:
    - echo "Give all users RW permissions in cwd"
    - sudo chmod -R a+rw ./
    - '[ -f .make/k8s.mk ] || (echo "File k8s.mk not included in Makefile; exit 1")'
    - 'make help | grep k8s-test'
    - make k8s-install-chart
    - make k8s-wait
