# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

variables:
  CHARTS_TO_PUBLISH: ska-mid-dish-manager
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - lint
  - build
  - test
  - publish
  - pages
  - scan

# Standardised included jobs

include:
  # Helm Chart linting and Publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

  # Python packages build,lint, test and publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python.gitlab-ci.yml'

  # OCI images build and publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'

  # k8s test
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/k8s-test-runner.gitlab-ci.yml'

  # Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs.gitlab-ci.yml'

  # Create Gitlab CI badges from CI metrics
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

  # Create a release
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/release.gitlab-ci.yml'

# mypy job
mypy:
  stage: lint
  script:
    - pip install mypy
    - mypy --ignore-missing-imports --config-file mypy.ini
      src/ska_mid_dish_manager/component_managers/ds_cm.py
      src/ska_mid_dish_manager/component_managers/spf_cm.py
      src/ska_mid_dish_manager/component_managers/spfrx_cm.py
      src/ska_mid_dish_manager/models/dish_mode_model.py
      src/ska_mid_dish_manager/models/dish_state_transition.py
  allow_failure: true

# store zmq events
process-and-store-zmq-events:
  tags:
    - ${SKA_K8S_RUNNER}
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
    DISH_MANAGER_POD: ds-dishmanager-001-0
    DEVICE_NAME: mid-dish/dish-manager/SKA001
  allow_failure: true
  when: always
  stage: test
  script:
    - git clone https://gitlab.com/ska-telescope/sdi/ska-cicd-makefile.git
    - cd ska-cicd-makefile
    - KUBE_APP=ska-mid-dish-manager make k8s-wait
    - sleep 10 # wait for the make install chart to be called in the install job
    - echo "Starting ZMQ event monitoring on $DEVICE_NAME in namespace $KUBE_NAMESPACE"
    - kubectl exec -i $DISH_MANAGER_POD -n $KUBE_NAMESPACE -- /app/bin/ska-tango-event-monitor $DEVICE_NAME
  artifacts:
    name: "$CI_JOB_NAME-$CI_JOB_ID-test-events"
    paths:
      - build/

stop-process-and-store-zmq-events:
  tags:
    - ${SKA_K8S_RUNNER}
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
    DISH_MANAGER_POD: ds-dishmanager-001-0
  stage: test
  when: always
  allow_failure: true
  script:
    - kubectl exec -i $DISH_MANAGER_POD -n $KUBE_NAMESPACE -- pkill -f "/app/bin/ska-tango-event-monitor mid-dish/dish-manager/SKA001"
    - kubectl exec -i $DISH_MANAGER_POD -n $KUBE_NAMESPACE -- ps aux | grep "/app/bin/ska-tango-event-monitor mid-dish/dish-manager/SKA001" | grep -v grep
    - kubectl exec -i $DISH_MANAGER_POD -n $KUBE_NAMESPACE -- if [[ $? -eq 0 ]]; then echo "Process still running!"; exit 1; fi
  needs:
    - k8s-test-runner
