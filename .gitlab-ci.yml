# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

variables:
  CHARTS_TO_PUBLISH: ska-mid-dish-manager
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - sync
  - lint
  - build
  - test
  - publish
  - pages
  - scan

# Standardised included jobs

include:
  # Helm Chart linting and Publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

  # Python packages build,lint, test and publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python.gitlab-ci.yml'

  # OCI images build and publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'

  # k8s test
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/k8s-test-runner.gitlab-ci.yml'

  # Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs.gitlab-ci.yml'

  # Create Gitlab CI badges from CI metrics
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

  # Create a release
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/release.gitlab-ci.yml'

#mypy job
mypy:
  stage: lint
  script:
    - pip install mypy
    - mypy --ignore-missing-imports --config-file mypy.ini
      src/ska_mid_dish_manager/component_managers/ds_cm.py
      src/ska_mid_dish_manager/component_managers/spf_cm.py
      src/ska_mid_dish_manager/component_managers/spfrx_cm.py
      src/ska_mid_dish_manager/models/dish_mode_model.py
      src/ska_mid_dish_manager/models/dish_state_transition.py
  allow_failure: true

sync-to-main:
  stage: sync
  script:
    - echo "Synchronizing scheduled testing branch to main branch"
    - git fetch origin
    # Attempt to merge main into testing branch and skip if already up to date
    - if git merge origin/main | grep "Already up to date."; then
        exit 0;
      fi
    # Commit merge using current users details as author
    - git config user.email "$GITLAB_USER_EMAIL" 
    - git config user.name "$GITLAB_USER_NAME"
    - git commit -m "KAR-1167 Merge branch main into kar-1167-scheduled-testing"
    # Ensure username is URL safe/encoded before pushing
    - GITLAB_USER_LOGIN=printf %s $GITLAB_USER_LOGIN | jq -Rr @uri
    # Push changes to branch and prevent loop of pipeline runs from being triggered by skipping ci pipeline
    # Note: GITLAB_TOKEN is a project access token defined in the pipeline scheduler
    - git push https://$GITLAB_USER_LOGIN:$GITLAB_TOKEN@gitlab.com/ska-telescope/ska-mid-dish-manager.git kar-1167-scheduled-testing -o ci.skip;
    - if [ $? -ne 0 ]; then 
        echo "Failed to push merged branch to repository as $GITLAB_USER_NAME. Please ensure that the access token is valid and configured in the pipeline scheduler menu";
        exit 1;
      fi
  allow_failure: false
