# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

variables:
  CHARTS_TO_PUBLISH: ska-mid-dish-manager
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - lint
  - build
  - test
  - publish
  - pages
  - scan

# Standardised included jobs

include:
  # Helm Chart linting and Publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

  # Python packages build,lint, test and publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python.gitlab-ci.yml'

  # OCI images build and publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'

  # k8s test
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/k8s-test-runner.gitlab-ci.yml'

  # Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs.gitlab-ci.yml'

  # Create Gitlab CI badges from CI metrics
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

  # Create a release
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/release.gitlab-ci.yml'

# mypy job
mypy:
  stage: lint
  script:
    - pip install mypy
    - mypy --ignore-missing-imports --config-file mypy.ini
      src/ska_mid_dish_manager/component_managers/ds_cm.py
      src/ska_mid_dish_manager/component_managers/spf_cm.py
      src/ska_mid_dish_manager/component_managers/spfrx_cm.py
      src/ska_mid_dish_manager/models/dish_mode_model.py
      src/ska_mid_dish_manager/models/dish_state_transition.py
  allow_failure: true

# store zmq events
process-and-store-zmq-events:
  variables:
    CLUSTER_DOMAIN: techops.internal.skao.int
  allow_failure: true
  image: artefact.skao.int/ska-tango-images-tango-python:0.1.0
  when: manual
  stage: test
  script:
    - sudo apt-get update && sudo apt-get install python3-pip -y
    - sudo pip install pytango --index-url https://gitlab.com/api/v4/projects/67270251/packages/pypi/simple
    - sudo pip install numpy==1.26.4
    - sudo pip install ska-tango-event-monitor --index-url https://gitlab.com/api/v4/projects/67270251/packages/pypi/simple
    - export TANGO_HOST=tango-databaseds.ci-${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}.svc.${CLUSTER_DOMAIN}:10000
    - mkdir -p build   # Create the build directory if it doesn't exist
    - ska-tango-event-monitor device mid-dish/ds-manager/SKA001
  artifacts:
    name: "$CI_JOB_NAME-$CI_JOB_ID"
    paths:
      - build/
